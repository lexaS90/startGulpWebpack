// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
		font-display: swap;
	}
}

// =============================================================================
// List
// =============================================================================


@mixin list-unstyled {
  padding-left: 0;
  list-style: none;
  margin: 0;
}

@mixin list-inline {
  @include list-unstyled;
  //margin-left: -5px;

  > li {
    display: inline-block;
    padding-left: 5px;
    padding-right: 5px;
  }
}

@mixin custom-list($color: red, $symbol: "â€¢ ", $size: 30px) {
	@include list-unstyled();

	& > li{
		position: relative;

	}

	& > li::before {
		position: absolute;
		content: $symbol;
		color: $color;
		top: 0;
		left: 0;
		font-size: $size;
		line-height: $size;
	}

}

@mixin custom-number-list($color: red, $size: 30px) {
	@include list-unstyled();
	
	counter-reset: listCounter;

	& > li{
		position: relative;
		//padding-left: 30px;

		@include media-max($break_xs){
			//padding-left: 26px;
		}
	}

	& > li::before {
		position: absolute;
		counter-increment: listCounter;
		content:'0'counter(listCounter)"/";
		color: $color;
		top: 0;
		left: -30px;
		font-size: $size;
		line-height: $size;
	}



}

// =============================================================================
// Breakpoint
// =============================================================================
@mixin media-min($size) {
	@media only screen and (min-width: $size) {
		@content;
	}
}

@mixin media-max($size) {
	@media only screen and (max-width : $size){
		@content;
	}
}

// =============================================================================
// Img
// =============================================================================

@mixin responsive-img() {
	display: block;
  max-width: 100%;
  height: auto;
}


// =============================================================================
// Gradient
// =============================================================================

// Url: https://www.sitepoint.com/building-linear-gradient-mixin-sass/

@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
	  @return $value
			   / nth($conversion-factors, index($convertable-units, unit($value)))
			   * nth($conversion-factors, index($convertable-units, $unit));
	}
	
	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
  }
  
  /// Test if `$value` is an angle
  /// @param {*} $value - Value to test
  /// @return {Bool}
  @function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
	
	@return $is-direction or $is-angle;
  }
  
  /// Convert a direction to legacy syntax
  /// @param {Keyword | Angle} $value - Value to convert
  /// @require {function} is-direction
  /// @require {function} convert-angle
  @function legacy-direction($value) {
	@if is-direction($value) == false {
	  @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}
	
	$conversion-map: ( 
	  to top          : bottom,
	  to top right    : bottom left,
	  to right top    : left bottom,
	  to right        : left,
	  to bottom right : top left,
	  to right bottom : left top,
	  to bottom       : top,
	  to bottom left  : top right,
	  to left bottom  : right top,
	  to left         : right,
	  to left top     : right bottom,
	  to top left     : bottom right
	);
	  
	@if map-has-key($conversion-map, $value) {
	  @return map-get($conversion-map, $value);
	}
	
	@return 90deg - convert-angle($value, 'deg');
  }
  
  /// Mixin printing a linear-gradient 
  /// as well as a plain color fallback 
  /// and the `-webkit-` prefixed declaration
  /// @access public
  /// @param {String | List | Angle} $direction - Linear gradient direction
  /// @param {Arglist} $color-stops - List of color-stops composing the gradient
  @mixin linearGradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
	  $color-stops: ($direction, $color-stops);
	  $direction: 180deg;
	}
	
	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
  }

// =============================================================================
// Clearfix
// =============================================================================

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// =============================================================================
// Bg-layout
// =============================================================================


@mixin bg-layout($bg-color: #000, $op: 0.6){
	position: relative;

	&::before{
		position: absolute;
		content: "";
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		background-color: rgba($bg-color, $op);
	}
}
